"""
This is the GUI interface to the maze searching app.
It was initially generated by pygubu-designer
using the customtkinter library.
"""

# customtkinter does not have a stub file.
# So we need tell Pylance and Pylint to ignore certain issues in this file:
# pyright: reportUnknownMemberType=false, reportMissingTypeStubs=false

from typing import Callable

from customtkinter import CTk, CTkButton, CTkFrame, CTkLabel, CTkOptionMenu, StringVar
from customtkinter.windows.widgets.core_rendering.ctk_canvas import CTkCanvas

TITLE = "Maze Search v.1.0.0"


class SearchGUI:  # pylint: disable=too-many-instance-attributes
    """
    SearchUI

    Provides the basic GUI for the maze searching app.
    """

    def __init__(
        self,
        master,  # type: ignore[reportUnknownParameterType]
        start_button_action: Callable[[str], None],
        data_pool=None,  # type: ignore[reportUnknownParameterType]
    ) -> None:  # type: ignore[reportUnknownParameterType]

        # Just so pylance and pylint don't conplain.

        self.master = master
        self.start_button_action: Callable[[str], None] = start_button_action
        self.data_pool = data_pool

        self.selected_a_search_pattern: bool = False
        self.maze: list[list[str]]

        self._focus_initialized: bool = False

        # build ui.

        ctk1 = CTk(None)
        ctk1.title(TITLE)
        ctk1.geometry("625x705")
        ctk1.attributes("-topmost", True)
        ctk1.resizable(False, False)

        ctkframe1 = CTkFrame(ctk1)
        ctkframe1.configure(height=620, width=620)
        ctkframe1.grid(column=0, row=0, sticky="nsew")

        ctkframe2 = CTkFrame(ctk1)
        ctkframe2.configure(height=100, width=620)
        ctkframe2.grid(column=0, row=1, sticky="nsew")
        ctkframe2.columnconfigure(1, weight=1)

        self.canvas = CTkCanvas(ctkframe1, name="canvas")
        self.canvas.configure(background="white", height=600, width=600)
        self.canvas.grid(column=0, padx=10, pady="10 5", row=0, sticky="nsew")

        for x in range(0, 620, 20):
            self.canvas.create_line(x, 0, x, 620, fill="lightgrey", width=1)

        for y in range(0, 620, 20):
            self.canvas.create_line(0, y, 620, y, fill="lightgrey", width=1)

        self.selected_search_pattern = StringVar(value="Select a seacrh pattern")
        self.search_pattern = CTkOptionMenu(
            ctkframe2, variable=self.selected_search_pattern
        )
        self.search_pattern.configure(width=400)
        self.search_pattern.grid(column=0, padx=10, pady=5, row=0, sticky="ew")
        self.search_pattern.configure(command=self.select_search_pattern)

        self.search = CTkButton(ctkframe2)
        self.search.configure(text="Search")
        self.search.grid(column=2, padx=10, pady=5, row=0)
        self.search.configure(command=self.start_search)

        self.status_bar = CTkFrame(ctkframe2)
        self.status_bar.configure(height=30)
        self.status_bar.grid(
            column=0, columnspan=3, padx=10, pady="5 10", row=1, sticky="ew"
        )
        self.status_text = CTkLabel(self.status_bar, text=TITLE)
        self.status_text.grid(row=0, column=0, padx=10)

        # Main widget.

        self.mainwindow = ctk1

    def select_search_pattern(self, current_value: str):
        """
        select_search_pattern

        Executed when a search pattern is selected.

        Args:
            current_value (str): The search pattern selected.
        """

        if self.selected_a_search_pattern:
            self.draw_maze(self.maze)

        self.selected_a_search_pattern = True

        self.message(f"[{current_value}] Ready to search...")

        # This is a bit of a fudge to ensure that the app doesnt loose focus
        # the fist time the pulldown menu is selected.

        delay = 500 if not getattr(self, "_focus_initialized", False) else 100
        self._focus_initialized = True
        self.mainwindow.after(delay, self.search.focus_set)

    def start_search(self):
        """
        start_search

        Executed when the start button is pressed.
        """
        if self.selected_a_search_pattern:
            self.start_button_action(self.selected_search_pattern.get())
        else:
            self.message("Select a search pattern")

    def draw_maze(self, maze: list[list[str]]) -> None:
        """
        draw_maze

        Draws a maze for a maze description.

        Args:
            maze (list[list[str]]): The maze description.
        """
        self.canvas.delete("all")

        for i, _row in enumerate(maze):
            for j, _col in enumerate(_row):

                if _col == "*":
                    self.fill_cell(i + 1, j + 1, "lightgrey")
                if _col in ("A", "B"):
                    self.fill_cell(i + 1, j + 1, "grey")
                    self.label_cell(i + 1, j + 1, _col, "white")

        self.canvas.update()

    def fill_cell(self, row: int, col: int, colour: str) -> None:
        """
        fill_cells

        Fills a given cell with the specified colour.

        Args:
            row (int): the row of the cell.
            col (int): the column of the cell.
            colour (q): the colour to fill with.
        """
        _row: int = (row - 1) * 20
        _col: int = (col - 1) * 20

        self.canvas.create_rectangle(_col, _row, _col + 20, _row + 20, fill=colour)

    def label_cell(self, row: int, col: int, text: str, colour: str) -> None:
        """
        label_cell

        Adds a label to a cell.

        Args:
            row (int): the row of the cell.
            col (int): the column of the cell.
            text (str): the cell to display.
            colour (str): the colour of the text.
        """
        _row: int = ((row - 1) * 20) + 10
        _col: int = ((col - 1) * 20) + 10

        self.canvas.create_text(_col, _row, text=text, fill=colour)

    def message(self, message: str) -> None:
        """
        message

        Shows a message usijng CTKMessageBox.

        Args:
            message (str): the message to show.
        """

        self.status_text.configure(text=message)

    def run(
        self,
        search_patterns: list[str],
        maze: list[list[str]],
    ) -> None:
        """
        run

        Runs the search GUI.
        """
        # Add search patersn to pulldown menu.

        self.search_pattern.configure(values=search_patterns)

        # Draw the maze.

        self.maze = maze
        self.draw_maze(maze)

        # Start the GUI.

        self.mainwindow.mainloop()
